#!/bin/bash sh

#
# Filename:         bashlib-dev
# Description:      Device and software validation
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
    source bashlib-proc
    source bashlib-vars
# </code>

# <code>
    # <summary> Distro-agnostic, Check if package exists on-line. </summary>
    # <param name=$1> string: the software package(s) </param>
    function FindPackage
    {
        ( IsString $1 && IsString "${str_package_manager}" )|| return $?

        # <params>
        local str_commands_to_execute=""
        local str_output_invalid_package="${var_prefix_fail}: Package(s) '${str_package_manager}' was/were not found."
        # </params>

        case "${str_package_manager}" in
            "apt" )
                str_commands_to_execute="apt list $1"
                ;;

            "dnf" )
                str_commands_to_execute="dnf search $1"
                ;;

            "pacman" )
                str_commands_to_execute="pacman -Ss $1"
                ;;

            "gentoo" )
                str_commands_to_execute="emerge --search $1"
                ;;

            "urpmi" )
                str_commands_to_execute="urpmq $1"
                ;;

            "yum" )
                str_commands_to_execute="yum search $1"
                ;;

            "zypper" )
                str_commands_to_execute="zypper se $1"
                ;;

            * )
                echo -e "${str_output_invalid_package_manager}"
                return 1
                ;;
        esac

        if ! eval "${str_commands_to_execute}" &> /dev/null; then
            echo -e "${str_output_invalid_package}"
            return 1
        fi

        return 0
    }

    # <summary> Test network connection to Internet. Ping DNS servers by address and name. </summary>
    # <param name=$1> boolean: true/false toggle verbosity </param>
    function GetInternetStatus
    {
        function GetInternetStatus_PingServer
        {
            IsString $1 || return $?
            ping -q -c 1 $1 &> /dev/null || return 1
            return 0
        }

        # <params>
        local bool=false
        # </params>

        if IsBool $1 &> /dev/null && $1; then
            bool=$1
        fi

        if $bool; then
            echo -en "Testing Internet connection...\t"
        fi

        if ! GetInternetStatus_PingServer "8.8.8.8" || ! GetInternetStatus_PingServer "1.1.1.1"; then
            false
        fi

        SaveExitCode

        if $bool; then
            ( return "${int_exit_code}" )
            PrintPassOrFail
            echo -en "Testing connection to DNS...\t"
        fi

        if ! GetInternetStatus_PingServer "www.google.com" || ! GetInternetStatus_PingServer "www.yandex.com"; then
            false
        fi

        SaveExitCode

        if $bool; then
            ( return "${int_exit_code}" )
            PrintPassOrFail
        fi

        if [[ "${int_exit_code}" -ne 0 ]]; then
            echo -e "Failed to ping Internet/DNS servers. Check network settings or firewall, and try again."
        fi

        return "${int_exit_code}"
    }

    # <summary> Check if current kernel and distro are supported, and if the expected Package Manager is installed. </summary>
    function GetLinuxDistro
    {
        # <params>
        local str_kernel="$( uname -o | tr '[:upper:]' '[:lower:]' )"
        local str_operating_system="$( lsb_release -is | tr '[:upper:]' '[:lower:]' )"
        local str_output_distro_is_not_valid="${var_prefix_error} Distribution '$( lsb_release -is )' is not supported."
        local str_output_kernel_is_not_valid="${var_prefix_error} Kernel '$( uname -o )' is not supported."
        local str_OS_with_apt="debian bodhi deepin knoppix mint peppermint pop ubuntu kubuntu lubuntu xubuntu "
        local str_OS_with_dnf_yum="redhat berry centos cern clearos elastix fedora fermi frameos mageia opensuse oracle scientific suse"
        local str_OS_with_pacman="arch manjaro"
        local str_OS_with_portage="gentoo"
        local str_OS_with_urpmi="opensuse"
        local str_OS_with_zypper="mandriva mageia"
        # </params>

        if ! IsString "${str_kernel}" &> /dev/null || ! IsString "${str_operating_system}" &> /dev/null; then
            return $?
        fi

        if [[ "${str_kernel}" != *"linux"* ]]; then
            echo -e "${str_output_kernel_is_not_valid}"
            return 1
        fi

        # <summary> Check if current Operating System matches Package Manager, and Check if PM is installed. </summary>
        # <returns> exit code </returns>
        function GetLinuxDistro_GetPackageManagerByOS
        {
            if [[ "${str_OS_with_apt}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="apt"

            elif [[ "${str_OS_with_dnf_yum}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="dnf"
                IsInstalledCommand "${str_package_manager}" &> /dev/null && return 0
                str_package_manager="yum"

            elif [[ "${str_OS_with_pacman}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="pacman"

            elif [[ "${str_OS_with_portage}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="portage"

            elif [[ "${str_OS_with_urpmi}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="urpmi"

            elif [[ "${str_OS_with_zypper}" =~ .*"${str_operating_system}".* ]]; then
                str_package_manager="zypper"

            else
                str_package_manager=""
                return 1
            fi

            IsInstalledCommand "${str_package_manager}" &> /dev/null && return 0
            return 1
        }

        if ! GetLinuxDistro_GetPackageManagerByOS; then
            echo -e "${str_output_distro_is_not_valid}"
            return 1
        fi

        return 0
    }

    # <summary> Check if system file is original or not. </summary>
    # <parameter name=$1> string: the system file </parameter>
    # <parameter name=$2> string: the software package(s) to install </parameter>
    # <parameter name="${bool_is_connected_to_Internet}"> boolean: GetInternetStatus </parameter>
    function IsFileOriginal
    {
        IsString $2 || return $?
        IsString $1 || return $?

        # <params>
        local bool_backup_file_exists=false
        local bool_system_file_is_original=false
        # </params>

        # <remarks> Original system file does not exist. </remarks>
        if $bool_is_connected_to_Internet && ! IsFile $1; then
            InstallPackage $2 true && bool_system_file_is_original=true
        fi

        # <remarks> Backup system file. </remarks>
        if BackupFile $1; then
            bool_backup_file_exists=true
        fi

        # <remarks> Do no work. </remarks>
        if ! $bool_backup_file_exists && ! $bool_system_file_is_original; then
            return 1
        fi

        # <remarks> It is unknown if system file *is* original. </remarks>
        if $bool_is_connected_to_Internet && $bool_backup_file_exists && ! $bool_system_file_is_original; then
            DeleteFile $1
            InstallPackage $2 true && bool_system_file_is_original=true
        fi

        # <remarks> System file *is not* original. Attempt to restore backup. </remarks>
        if $bool_backup_file_exists && ! $bool_system_file_is_original; then
            RestoreFile $1
            return $?
        fi

        return 0
    }

    # <summary> Distro-agnostic, Install a software package. </summary>
    # <param name=$1> string: the software package(s) </param>
    # <param name=$2> boolean: true/false do/don't reinstall software package and configuration files (if possible) </param>
    # <param name="${str_package_manager}"> string: the package manager </param>
    function InstallPackage
    {
        IsString "${str_package_manager}" || return $?
        IsString $1 || return $?

        # <params>
        local bool_option_reinstall=false
        local str_commands_to_execute=""
        local str_output="Installing software packages..."
        # </params>

        IsBool $2 &> /dev/null && bool_option_reinstall=true

        # <remarks> Auto-update and auto-install selected packages </remarks>
        case "${str_package_manager}" in
            "apt" )
                local str_option="--reinstall -o Dpkg::Options::=--force-confmiss"
                str_commands_to_execute="apt update && apt full-upgrade -y && apt install ${str_option} -y $1"
                ;;

            "dnf" )
                str_commands_to_execute="dnf upgrade && dnf install $1"
                ;;

            "pacman" )
                str_commands_to_execute="pacman -Syu && pacman -S $1"
                ;;

            "gentoo" )
                str_commands_to_execute="emerge -u @world && emerge $1"
                ;;

            "urpmi" )
                str_commands_to_execute="urpmi --auto-update && urpmi $1"
                ;;

            "yum" )
                str_commands_to_execute="yum update && yum install $1"
                ;;

            "zypper" )
                str_commands_to_execute="zypper refresh && zypper in $1"
                ;;

            * )
                echo -e "${str_output_invalid_package_manager}"
                return 1
                ;;
        esac

        echo "${str_output}"
        eval "${str_commands_to_execute}" || ( return 1 )
        PrintPassOrFail "${str_output}"
        return $?
    }

    # <summary> Distro-agnostic, check if package is installed. </summary>
    # <param name=$1> string: the software package(s) </param>
    # <param name="${str_package_manager}"> string: the package manager </param>
    function IsInstalledPackage
    {
        IsString "${str_package_manager}" || return $?
        IsString $1 || return $?

        # <params>
        local var_get_command=""
        # </params>

        # <remarks> Check if package is not installed </remarks>
        case "${str_package_manager}" in
            "apt" )
                var_get_command="dpkg -s $1" || return $?
                ;;

            * )
                echo -e "${str_output_invalid_package_manager}"
                return 1
                ;;
        esac

        declare -i int_delim=1

        while true; do
            local str_package=$( echo $1 | cut -d ' ' -f $int_delim )
            IsString $str_package &> /dev/null || return 0
            eval "${var_get_command}" &> /dev/null || break
            (( int_delim++ ))
        done

        return 1
    }

    # <summary> Update GetInternetStatus </summary>
    # <param name="${bool_is_connected_to_Internet}"> boolean: network status </param>
    function SetInternetStatus
    {
        ( StopEvalAfterThriceFail "GetInternetStatus true" && bool_is_connected_to_Internet=true ) || bool_is_connected_to_Internet=false
    }

    # <summary> Distro-agnostic, Uninstall a software package. </summary>
    # <param name=$1> string: the software package(s) </param>
    # <param name="${str_package_manager}"> string: the package manager </param>
    function UninstallPackage
    {
        IsString "${str_package_manager}" || return $?
        IsString $1 || return $?

        # <params>
        local str_commands_to_execute=""
        local str_output="Uninstalling software packages..."
        # </params>

        # <remarks> Uninstall selected packages </remarks>
        case "${str_package_manager}" in
            "apt" )
                str_commands_to_execute="apt uninstall $1"
                ;;

            "dnf" )
                str_commands_to_execute="dnf remove $1"
                ;;

            "pacman" )
                str_commands_to_execute="pacman -R $1"
                ;;

            "gentoo" )
                str_commands_to_execute="emerge -Cv $1"
                ;;

            "urpmi" )
                str_commands_to_execute="urpme $1"
                ;;

            "yum" )
                str_commands_to_execute="yum remove $1"
                ;;

            "zypper" )
                str_commands_to_execute="zypper remove $1"
                ;;

            * )
                echo -e "${str_output_invalid_package_manager}"
                return 1
                ;;
        esac

        echo "${str_output}"
        eval "${str_commands_to_execute}" &> /dev/null || ( return 1 )
        PrintPassOrFail "${str_output}"
        return $?
    }

    # <summary> Update or Clone repository given if it exists or not. </summary>
    # <param name=$1> string: the directory </param>
    # <param name=$2> string: the full repo name </param>
    # <param name=$3> string: the username </param>
    function UpdateOrCloneGitRepo
    {
        IsString $3 || return $?
        IsString $2 || return $?
        IsString $1 || return $?
        CreateDir "$1$3"

        # <summary> Update existing GitHub repository. </summary>
        if IsDir "$1$2"; then
            local var_command="git pull"
            cd "$1$2"
            eval "${var_command}" &> /dev/null || return 1
            return 0

        # <summary> Clone new GitHub repository. </summary>
        elif IsDir "$1$3"; then
            if ReadInput "Clone repo '$2'?"; then
                local var_command="git clone https://github.com/$2"
                cd "$1$3"
                eval "${var_command}" &> /dev/null || return 1
                return 0
            fi

            return 1
        else
            return 1
        fi
    }
# </code>

# <params>
    declare -g str_output_invalid_package_manager="${var_prefix_fail}: Command '${str_package_manager}' is not supported."

    # <summary> System validation </summary>
    declare -g bool_is_installed_systemd=false
    IsInstalledCommand "systemd" &> /dev/null && bool_is_installed_systemd=true

    declare -gl str_package_manager=""
    GetLinuxDistro &> /dev/null
# </params>