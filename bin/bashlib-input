#!/bin/bash sh

#
# Filename:         bashlib-input
# Description:      User input
# Author(s):        Alex Portell <github.com/portellam>
# Maintainer(s):    Alex Portell <github.com/portellam>
#

# <remarks> Using </remarks>
# <code>
    source bashlib-globals
    source bashlib-misc
    source bashlib-vars
# </code>

# <summary> User input </summary>
# <code>
    # <summary> Ask user Yes/No, read input and return exit code given answer. </summary>
    # <param name="1"> string: the output statement </param>
    function ReadInput
    {
        # <params>
        local str_no="N"
        local str_yes="Y"
        local str_output=""
        # </params>

        IsString $1 &> /dev/null && str_output="${1} "
        str_output+="${var_green}[Y/n]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do

            # <remarks> Append output. </remarks>
            echo -en "${str_output} "
            read var_input
            var_input=$( echo $var_input | tr '[:lower:]' '[:upper:]' )

            # <remarks> Check if input is valid. </remarks>
            if IsString $var_input; then
                case $var_input in
                    $str_yes )
                        return 0
                        ;;
                    $str_no )
                        return 1
                        ;;
                esac
            fi

            # <remarks> Input is not valid. </remarks>
            echo -e $str_output_var_is_not_valid
        done

        # <remarks> After given number of attempts, input is set to default. </remarks>
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}${str_no}${var_reset_color}"
        echo -e $str_output
        return 1
    }

    # <summary>
    # Ask for a number, within a given range, and return given number.
    # If input is not valid, return minimum value. Declare '$var_input' before calling this function.
    # </summary>
    # <parameter name="1"> string: the output statement </parameter>
    # <parameter name="2"> num: absolute minimum </parameter>
    # <parameter name="3"> num: absolute maximum </parameter>
    # <parameter name=var_input> the answer </parameter>
    # <returns> $var_input </returns>
    function ReadInputFromRangeOfTwoNums
    {
        # <params>
        local var_min=2
        local var_max=3
        local str_output=""
        var_input=""
        # </params>

        if ( ! IsNum $var_min || ! IsNum $var_max ) &> /dev/null; then
            echo -e $str_fail_invalid_extrema
            return 1
        fi

        IsString $1 &> /dev/null && str_output="${1} "

        str_output+="${var_green}[${var_min}-${var_max}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do

            # <remarks> Append output. </remarks>
            echo -en "${str_output} "
            read var_input

            # <remarks> Check if input is valid. </remarks>
            if IsNum $var_input && [[ $var_input -ge $var_min && $var_input -le $var_max ]]; then
                return 0
            fi

            # <remarks> Input is not valid. </remarks>
            echo -e "${str_fail}"
        done

        var_input=$var_min
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}${var_input}${var_reset_color}"
        echo -e $str_output
        return 1
    }

    # <summary>
    # Ask user for multiple choice, and return choice given answer.
    # If input is not valid, return first value. Declare '$var_input' before calling this function.
    # </summary>
    # <parameter name="1"> string: the output statement </parameter>
    # <param name="2" name="3" name="4" name="5" name="6" name="7" name="8"> multiple choice </param>
    # <param name=var_input> the answer </param>
    # <returns> the answer </returns>
    function ReadMultipleChoiceIgnoreCase
    {
        # <params>
        declare -a arr_input=( )
        local str_output=""
        var_input=""
        # </params>

        # <remarks> Minimum multiple choice are two answers. </remarks>
        if ( ! IsString $2 || ! IsString $3 ) &> /dev/null; then
            SaveExitCode
            echo -e $str_fail_not_enough_answers
            return $int_exit_code
        fi

        arr_input+=( $2 )
        arr_input+=( $3 )

        if IsString $4 &> /dev/null; then arr_input+=( $4 ); fi
        if IsString $5 &> /dev/null; then arr_input+=( $5 ); fi
        if IsString $6 &> /dev/null; then arr_input+=( $6 ); fi
        if IsString $7 &> /dev/null; then arr_input+=( $7 ); fi
        if IsString $8 &> /dev/null; then arr_input+=( $8 ); fi
        if IsString $9 &> /dev/null; then arr_input+=( $9 ); fi

        IsString $1 &> /dev/null && str_output="${1} "
        str_output+="${var_green}[${arr_input[@]}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do
            echo -en "${str_output} "
            read var_input

            if IsString $var_input; then
                var_input=$( echo $var_input | tr '[:lower:]' '[:upper:]' )

                for var_element in ${arr_input[@]}; do
                    if [[ $var_input == $( echo $var_element | tr '[:lower:]' '[:upper:]' ) ]]; then
                        var_input=$var_element
                        return 0
                    fi
                done
            fi

            echo -e $str_output_var_is_not_valid
        done

        var_input=${arr_input[0]}
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}${var_input}${var_reset_color}"
        echo -e $str_output
        return 1
    }

    # <summary>
    # Ask user for multiple choice, and return given choice.
    # If input is not valid, return first value.
    # Declare '$var_input' before calling this function.
    # </summary>
    # <parameter name="1"> string: the output statement </parameter>
    # <param name="2" name="3" name="4" name="5" name="6" name="7" name="8"> multiple choice </param>
    # <param name=var_input> the answer </param>
    # <returns> the answer </returns>
    function ReadMultipleChoiceMatchCase
    {
        # <params>
        declare -a arr_input=( )
        local str_output=""
        var_input=""
        # </params>

        # <remarks> Minimum multiple choice are two answers. </remarks>
        if ( ! IsString $2 || ! IsString $3 ) &> /dev/null; then
            echo -e $str_fail_not_enough_answers
            return 1
        fi

        arr_input+=( $2 )
        arr_input+=( $3 )

        if IsString $4 &> /dev/null; then arr_input+=( $4 ); fi
        if IsString $5 &> /dev/null; then arr_input+=( $5 ); fi
        if IsString $6 &> /dev/null; then arr_input+=( $6 ); fi
        if IsString $7 &> /dev/null; then arr_input+=( $7 ); fi
        if IsString $8 &> /dev/null; then arr_input+=( $8 ); fi
        if IsString $9 &> /dev/null; then arr_input+=( $9 ); fi

        IsString $1 &> /dev/null && str_output="${1} "
        str_output+="${var_green}[${arr_input[@]}]:${var_reset_color}"

        for int_count in ${arr_count_tries[@]}; do
            echo -en "${str_output} "
            read var_input

            if IsString $var_input &> /dev/null; then
                for var_element in ${arr_input[@]}; do
                    if [[ "${var_input}" == "${var_element}" ]]; then
                        var_input=$var_element
                        return 0
                    fi
                done
            fi

            echo -e $str_output_var_is_not_valid
        done

        var_input=${arr_input[0]}
        str_output="Exceeded max attempts. Choice is set to default: ${var_yellow}${var_input}${var_reset_color}"
        echo -e $str_output
        return 1
    }
# </code>

# <params>
    # <remarks> Output statement </remarks>
    declare -g str_fail_invalid_extrema="${var_prefix_error} Extrema are not valid."
    declare -g str_fail_not_enough_answers="${var_prefix_error} Insufficient multiple choice answers."
# </params>